# verb to sort in descending order of public_work
counties_selected %>%
  arrange(desc(public_work))
  
  - - - - - - - - - - - - - - -Filter to meet conditional criteria   - - - - - - - - - - - - - - -
  # Filter for counties in the state of California that have a population above 1000000
counties_selected %>%
filter(state=="California", population>1000000)

  - - - - - - - - - - - - - - - Filter and Sort   - - - - - - - - - - - - - - -
# Filter for Texas and more than 10000 people; sort in descending order of private_work
counties_selected %>% 
filter(state=="Texas", population>10000) %>%
arrange(desc(private_work))

  - - - - - - - - - - - - - - - Mutate new columns   - - - - - - - - - - - - - - -
counties_selected <- counties %>%
  select(state, county, population, public_work)

# Sort in descending order of the public_workers column
counties_selected %>%
  mutate(public_workers = public_work * population / 100) %>%
  arrange(desc(public_workers))
  
   - - - - - - - - - - - - - - -  Verbs   - - - - - - - - - - - - - - - 
  counties %>%
  # Select the five columns 
  select(state, county, population, men,women) %>%
  # Add the proportion_men variable
  mutate(proportion_men = men/population) %>%
  # Filter for population of at least 10,000
  filter(population>=10000) %>%
  # Arrange proportion of men in descending order 
  arrange(desc(proportion_men))
  
   - - - - - - - - - - - - - - - Count  - - - - - - - - - - - - - - - 
  # Find number of counties per state, weighted by citizens
counties_selected %>%
  count(state, wt=citizens, sort=TRUE)
 " obs=California is the state with the most citizens."
 
   - - - - - - - - - - - - - - - Summarize    - - - - - - - - - - - - - - -
 # Summarize to find minimum population, maximum unemployment, and average income
counties_selected %>%
  summarize(min_population = min(population), max_unemployment = max(unemployment), average_income = mean(income))
  
     - - - - - - - - - - - - - - - Sort   - - - - - - - - - - - - - - - 
  # Add a density column, then sort in descending order
counties_selected %>%
  group_by(state) %>%
  summarize(total_area = sum(land_area),
            total_population = sum(population)) %>%
            mutate(density = total_population/total_area) %>%
            arrange(desc(density))
            
- - - - - - - - - - - - - - -  Example    - - - - - - - - - - - - - - - 
            # Calculate the average_pop and median_pop columns 
counties_selected %>%
  group_by(region, state) %>%
  summarize(total_pop = sum(population)) %>%
  summarize(average_pop = mean(total_pop), median_pop=median(total_pop))
  
 - - - - - - - - - - - - - - -  top_n - - - - - - - - - - - - - - - 
  # Group by region and find the greatest number of citizens who walk to work
counties_selected %>%
  group_by(region) %>%
  top_n(1, walk)
  
   - - - - - - - - - - - - - - - top_n  - - - - - - - - - - - - - - - 
  counties_selected %>%
  group_by(region, state) %>%
  # Calculate average income
  summarize(average_income = mean(income)) %>%
  # Find the highest income state in each region
  top_n(1, average_income )
  
  - - - - - - - - - - - - - - - Using summarize, top_n, and count together  - - - - - - - - - - - - - - -
  counties_selected <- counties %>%
  select(state, metro, population)
  
  # Count the num of states with more people in Metro or Nonmetro areas
counties_selected %>%
  group_by(state, metro) %>%
  summarize(total_pop = sum(population)) %>%
  top_n(1, total_pop) %>%
  ungroup() %>%
  count(metro)
  
  - - - - - - - - - - - - - - - Select  - - - - - - - - - - - - - - -
  # Glimpse the counties table
glimpse(counties)

counties %>%
  # Select state, county, population, and industry-related columns
  select(state, county, population, professional:production) %>%
  # Arrange service in descending order 
  arrange(desc(service))
 
    - - - - - - - - - - - - - - - example   - - - - - - - - - - - - - - -
 counties %>%
  # Select the state, county, population, and those ending with "work"
  select(state, county, population, ends_with("work")) %>%
  # Filter for counties that have at least 50% of people engaged in public work (public work was already in percent.)
  filter((public_work >=50))
  
    - - - - - - - - - - - - - - - # Rename the n column to num_counties   - - - - - - - - - - - - - - - 
counties %>%
  count(state) %>%
  rename(num_counties = n)
  
    - - - - - - - - - - - - - - -  # rename one of those columns, using only the select() verb!   - - - - - - - - - - - - - - - 
counties %>%
select(state, county, poverty_rate=poverty)

   - - - - - - - - - - - - - - -  Transmute  (keep/create new vars)  - - - - - - - - - - - - - - - 
counties %>%
  # Keep the state, county, and populations columns, and add a density column
  transmute(state, county, population, density=population/land_area) %>%
  # Filter for counties with a population greater than one million 
  filter(population>1000000)%>%
  # Sort density in ascending order 
  arrange(density)
   - - - - - - - - - - - - - - -  Select   - - - - - - - - - - - - - - - 
  # Change the name of the unemployment column
counties %>%
  rename(unemployment_rate = unemployment)

# Keep the state and county columns, and the columns containing poverty
counties %>%
  select(state, county, contains("poverty"))

# Calculate the fraction_women column without dropping the other columns
counties %>%
  mutate(fraction_women = women / population)

# Keep only the state, county, and employment_rate columns
counties %>%
 transmute(state, county, employment_rate = employed / population)
 
  - - - - - - - - - - - - - - -  Filter + Plot  - - - - - - - - - - - - - - - 
 # Filter for the names Steven, Thomas, and Matthew 
selected_names <- babynames %>%
  filter(name %in% c("Steven", "Thomas", "Matthew"))

# Plot the names using a different color for each name
ggplot(selected_names, aes(x = year, y = number, color = name)) +
  geom_line()
  
    - - - - - - - - - - - - - - -  New Normalized Col  - - - - - - - - - - - - - - - 
  obs = name Abe was at 18.5% of its peak in the year 1880.
  babynames %>%
  group_by(name) %>%
  mutate(name_total = sum(number),
         name_max = max(number)) %>%
  # Ungroup the table 
  ungroup() %>%
  # Add the fraction_max column containing the number by the name maximum 
  mutate(fraction_max = number / name_max)
  
  - - - - - - - - - - - - - - Plot  - - - - - - - - - - - - - - -
  # Filter for the names Steven, Thomas, and Matthew
names_filtered <- names_normalized %>%
  filter(name %in% c("Steven", "Thomas", "Matthew"))
  
# Visualize these names over time
ggplot(names_filtered, aes(x=year, y=fraction_max, color=name))+
geom_line()

 - - - - - - - - - - - - - - - lag() function  - - - - - - - - - - - - - - -
babynames_fraction %>%
  # Arrange the data in order of name, then year 
  arrange(name, year) %>%
  # Group the data by name
  group_by(name) %>%
  # Add a ratio column that contains the ratio between each year 
  mutate(ratio=fraction/lag(fraction))
  
  - - - - - - - - - - - - - - - top_n - - - - - - - - - - - - - - -
  babynames_ratios_filtered %>%
  # Extract the largest ratio from each name 
      top_n(1, ratio) %>%
  # Sort the ratio column in descending order 
     arrange(desc(ratio)) %>%
  # Filter for fractions greater than or equal to 0.001
     filter(fraction>=.001)
